import numpy as np

Nb = 4
Nr = 10
Nk = 4

sbox = np.array([
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
], dtype=np.ubyte)

inv_sbox = np.array([
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
], dtype=np.ubyte)

rcon = np.array([[0x01, 0x00, 0x00, 0x00],
                 [0x02, 0x00, 0x00, 0x00],
                 [0x04, 0x00, 0x00, 0x00],
                 [0x08, 0x00, 0x00, 0x00],
                 [0x10, 0x00, 0x00, 0x00],
                 [0x20, 0x00, 0x00, 0x00],
                 [0x40, 0x00, 0x00, 0x00],
                 [0x80, 0x00, 0x00, 0x00],
                 [0x1b, 0x00, 0x00, 0x00],
                 [0x36, 0x00, 0x00, 0x00]], dtype=np.ubyte)

# indexes of elements in flattened 4x4 array after shifting rows
shift_idx = [[0, 1, 2, 3],
             [5, 6, 7, 4],
             [10, 11, 8, 9],
             [15, 12, 13, 14]]

inv_shift_idx = [[0, 1, 2, 3],
                 [7, 4, 5, 6],
                 [10, 11, 8, 9],
                 [13, 14, 15, 12]]


# helper functions for multiplication in Galois field
def mul_by_02(num):
    return np.where(num < 0x80, num << 1, (num << 1) ^ 0x1b) % 0x100


def mul_by_03(num):
    return mul_by_02(num) ^ num


def mul_by_09(num):
    return mul_by_02(mul_by_02(mul_by_02(num))) ^ num


def mul_by_0b(num):
    return mul_by_02(mul_by_02(mul_by_02(num))) ^ mul_by_02(num) ^ num


def mul_by_0d(num):
    return mul_by_02(mul_by_02(mul_by_02(num))) ^ mul_by_02(mul_by_02(num)) ^ num


def mul_by_0e(num):
    return mul_by_02(mul_by_02(mul_by_02(num))) ^ mul_by_02(mul_by_02(num)) ^ mul_by_02(num)


# Galois field multiplication table
mult_table = np.repeat(np.arange(256)[None, :], 6, axis=0)
mult_table[0] = mul_by_02(mult_table[0])  # multiplication by 0x02
mult_table[1] = mul_by_03(mult_table[1])  # multiplication by 0x03
mult_table[2] = mul_by_09(mult_table[2])  # multiplication by 0x09
mult_table[3] = mul_by_0b(mult_table[3])  # multiplication by 0x0b
mult_table[4] = mul_by_0d(mult_table[4])  # multiplication by 0x0d
mult_table[5] = mul_by_0e(mult_table[5])  # multiplication by 0x0e


# key expansion
def rot_word(word):
    return np.roll(word, -1)


def sub_word(word):
    return sbox[word]


def key_expansion(key):
    """Create key schedule"""
    w = np.zeros((Nb * (Nr + 1), 4), dtype=np.ubyte)
    i = 0
    while i < Nk:
        w[i] = key[4 * i:4 * i + 4]
        i += 1
    i = Nk
    while i < Nb * (Nr + 1):
        temp = w[i - 1]
        if i % Nk == 0:
            temp = sub_word(rot_word(temp)) ^ rcon[i // Nk - 1]
        elif Nk > 6 and i % Nk == 4:
            temp = sub_word(temp)
        w[i] = w[i - Nk] ^ temp
        i += 1
    return w


# cipher and decipher
def add_round_key(state, round_key):
    return state ^ round_key


def sub_bytes(state, inv=False):
    if inv:
        return inv_sbox[np.reshape(state, -1)].reshape((4, -1))
    return sbox[np.reshape(state, -1)].reshape((4, -1))


def shift_rows(state, inv=False):
    if inv:
        return np.take(state, inv_shift_idx)
    return np.take(state, shift_idx)


def mix_columns(state, inv=False):
    s = state
    if inv:
        s0 = mult_table[5][s[0]] ^ mult_table[3][s[1]] ^ mult_table[4][s[2]] ^ mult_table[2][s[3]]
        s1 = mult_table[2][s[0]] ^ mult_table[5][s[1]] ^ mult_table[3][s[2]] ^ mult_table[4][s[3]]
        s2 = mult_table[4][s[0]] ^ mult_table[2][s[1]] ^ mult_table[5][s[2]] ^ mult_table[3][s[3]]
        s3 = mult_table[3][s[0]] ^ mult_table[4][s[1]] ^ mult_table[2][s[2]] ^ mult_table[5][s[3]]
    else:
        s0 = mult_table[0][s[0]] ^ mult_table[1][s[1]] ^ s[2] ^ s[3]
        s1 = s[0] ^ mult_table[0][s[1]] ^ mult_table[1][s[2]] ^ s[3]
        s2 = s[0] ^ s[1] ^ mult_table[0][s[2]] ^ mult_table[1][s[3]]
        s3 = mult_table[1][s[0]] ^ s[1] ^ s[2] ^ mult_table[0][s[3]]
    state[:] = [s0, s1, s2, s3]
    return state


def cipher(in_bytes, w):
    """Cipher one 128-bit block"""
    state = np.reshape(in_bytes, (4, -1)).T

    round_key = w[0:Nb].T
    state = add_round_key(state, round_key)

    for curr_round in range(1, Nr):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        round_key = w[curr_round * Nb:(curr_round + 1) * Nb].T
        state = add_round_key(state, round_key)

    state = sub_bytes(state)
    state = shift_rows(state)
    round_key = w[Nr * Nb:(Nr + 1) * Nb].T
    state = add_round_key(state, round_key)
    return state


def decipher(in_bytes, w):
    """Decipher one 128-bit block"""
    state = np.reshape(in_bytes, (4, -1)).T

    round_key = w[Nr * Nb:(Nr + 1) * Nb].T
    state = add_round_key(state, round_key)

    for curr_round in range(Nr - 1, 0, -1):
        state = shift_rows(state, True)
        state = sub_bytes(state, True)
        round_key = w[curr_round * Nb:(curr_round + 1) * Nb].T
        state = add_round_key(state, round_key)
        state = mix_columns(state, True)

    state = shift_rows(state, True)
    state = sub_bytes(state, True)
    round_key = w[0:Nb].T
    state = add_round_key(state, round_key)
    return state


# user-friendly encryption and decryption
def to_blocks(message, block_size=16, decode=False):
    """
    Split list of bytes into lists of length block_size.
    When decode=False pad first block with zeros and write the position of first non-padded element into first block byte.
    """
    if decode:
        return (message[block_size * i:block_size * (i + 1)] for i in range(len(message) // block_size))
    first_block_start = (block_size - len(message) % block_size - 1) % block_size + 1
    message = [first_block_start] + [0] * (block_size - (len(message) + 1) % block_size) + message
    return (message[block_size * i:block_size * (i + 1)] for i in range(len(message) // block_size))


def to_word(hex_word):
    """Convert hex string to array of bytes"""
    return np.array([int(hex_word[i:i + 2], 16) for i in range(0, len(hex_word), 2)], dtype=np.ubyte)


def to_hex(arr):
    """Convert array or list of bytes to hex string"""
    if isinstance(arr, list) or len(arr.shape) == 1:
        return ''.join(hex(byte)[2:].zfill(2) for byte in arr)
    else:
        return ''.join(hex(byte)[2:].zfill(2) for word in arr.T for byte in word)


def encrypt(message, key):
    """Encrypt list of bytes with key"""
    blocks = to_blocks(message)
    encrypted_message = []

    w = key_expansion(to_word(key))
    for block in blocks:
        encrypted_message += cipher(block, w).T.flatten().tolist()
    return encrypted_message


def decrypt(encrypted_message, key):
    """Decrypt encrypted list of bytes with key"""
    blocks = to_blocks(encrypted_message, decode=True)
    message = []

    w = key_expansion(to_word(key))
    first_block = True
    for block in blocks:
        if first_block:
            decrypted = decipher(block, w).T.flatten().tolist()
            message += decrypted[decrypted[0]:]
            first_block = False
        else:
            message += decipher(block, w).T.flatten().tolist()
    return message
